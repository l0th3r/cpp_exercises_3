Consider the type defined as such:

struct s_number {std::string _value;}

It consists of a signed integer value with no upper or lower bound.
It's value is stored as a decimal string and all arithmetic operations
are performed directly with string representations.

Consider that if the string is empty, the value is equal to 0.
Don't consider cases where the string has an invalid value.

Exercises from 1 to 5 should be written in files that follow the following
logic: definitions in s_number.h and declarations in s_number.cpp

ex01:
Write operators that would make the following sample code work:

s_number a, b, c;
a = {"2"};
b = {"-1"};
c = a + b; // "1"
a = b - c; // "0"

ex02:
Write operators that would make the following sample code work:

s_number a, b;
a = {"5"};
b = -a; // "-5"
a = +b; // "-5"

ex03:
Write operators that would make the following sample code work:

s_number a, b, c, d, e;
a = {"92"};
b = {"9"};
c = a * b; // "828"
d = a / b; // "10"
e = a % b; // "2"

ex04:
Write operators that would make the following sample code work:

s_number a, b;
a = {"300"};
std::cout << a << std::endl;
std::cin >> b;

ex05:

Write the following operator overloads for s_number: == < > >= <= !=
